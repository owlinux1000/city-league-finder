// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package client

import (
	"context"

	"github.com/owlinux1000/city-league-finder/client"
	mock "github.com/stretchr/testify/mock"
)

// NewMockClientAdapter creates a new instance of MockClientAdapter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockClientAdapter(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockClientAdapter {
	mock := &MockClientAdapter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockClientAdapter is an autogenerated mock type for the ClientAdapter type
type MockClientAdapter struct {
	mock.Mock
}

type MockClientAdapter_Expecter struct {
	mock *mock.Mock
}

func (_m *MockClientAdapter) EXPECT() *MockClientAdapter_Expecter {
	return &MockClientAdapter_Expecter{mock: &_m.Mock}
}

// EventSearch provides a mock function for the type MockClientAdapter
func (_mock *MockClientAdapter) EventSearch(ctx context.Context, params *client.EventSearchParams) (*client.EventSearchResponse, error) {
	ret := _mock.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for EventSearch")
	}

	var r0 *client.EventSearchResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *client.EventSearchParams) (*client.EventSearchResponse, error)); ok {
		return returnFunc(ctx, params)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *client.EventSearchParams) *client.EventSearchResponse); ok {
		r0 = returnFunc(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.EventSearchResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *client.EventSearchParams) error); ok {
		r1 = returnFunc(ctx, params)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClientAdapter_EventSearch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EventSearch'
type MockClientAdapter_EventSearch_Call struct {
	*mock.Call
}

// EventSearch is a helper method to define mock.On call
//   - ctx context.Context
//   - params *client.EventSearchParams
func (_e *MockClientAdapter_Expecter) EventSearch(ctx interface{}, params interface{}) *MockClientAdapter_EventSearch_Call {
	return &MockClientAdapter_EventSearch_Call{Call: _e.mock.On("EventSearch", ctx, params)}
}

func (_c *MockClientAdapter_EventSearch_Call) Run(run func(ctx context.Context, params *client.EventSearchParams)) *MockClientAdapter_EventSearch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *client.EventSearchParams
		if args[1] != nil {
			arg1 = args[1].(*client.EventSearchParams)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockClientAdapter_EventSearch_Call) Return(eventSearchResponse *client.EventSearchResponse, err error) *MockClientAdapter_EventSearch_Call {
	_c.Call.Return(eventSearchResponse, err)
	return _c
}

func (_c *MockClientAdapter_EventSearch_Call) RunAndReturn(run func(ctx context.Context, params *client.EventSearchParams) (*client.EventSearchResponse, error)) *MockClientAdapter_EventSearch_Call {
	_c.Call.Return(run)
	return _c
}

// EventURL provides a mock function for the type MockClientAdapter
func (_mock *MockClientAdapter) EventURL(event *client.Event) string {
	ret := _mock.Called(event)

	if len(ret) == 0 {
		panic("no return value specified for EventURL")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func(*client.Event) string); ok {
		r0 = returnFunc(event)
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// MockClientAdapter_EventURL_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EventURL'
type MockClientAdapter_EventURL_Call struct {
	*mock.Call
}

// EventURL is a helper method to define mock.On call
//   - event *client.Event
func (_e *MockClientAdapter_Expecter) EventURL(event interface{}) *MockClientAdapter_EventURL_Call {
	return &MockClientAdapter_EventURL_Call{Call: _e.mock.On("EventURL", event)}
}

func (_c *MockClientAdapter_EventURL_Call) Run(run func(event *client.Event)) *MockClientAdapter_EventURL_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *client.Event
		if args[0] != nil {
			arg0 = args[0].(*client.Event)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockClientAdapter_EventURL_Call) Return(s string) *MockClientAdapter_EventURL_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *MockClientAdapter_EventURL_Call) RunAndReturn(run func(event *client.Event) string) *MockClientAdapter_EventURL_Call {
	_c.Call.Return(run)
	return _c
}
